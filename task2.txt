Уточняющие вопросы к заданию 1:
1. Какой максимальный размер загружаемого файла допустим?
2. Какие именно ошибки валидации должны быть обработаны?
3. Должны ли строки с ошибками полностью игнорироваться или частично сохраняться?
4. Нужно ли логировать успешные импорты в базу данных?
5. Нужно ли обрабатывать дубликаты записей?
6. Должен ли импорт выполняться синхронно или можно использовать очереди?
7. Как долго хранить прогресс в Redis?
8. Нужно ли отображать пользователю статус импорта в реальном времени?
9. Какие действия предпринимать при сбоях во время импорта?
10. Должен ли API поддерживать пагинацию при получении импортированных данных?

Формулировка задачи для джуниора:
Разработать функционал импорта Excel-файлов (.xlsx) с данными (id, name, date).

- Создать форму для загрузки файла.
- Реализовать валидацию файла (размер, формат, структура).
- Реализовать обработку и сохранение данных в базу.
- Не прошедшие валидацию строки игнорировать и записывать ошибки в result.txt.
- Добавить возможность отслеживания прогресса импорта в Redis.
- Создать API для получения импортированных данных, сгруппированных по дате.
- Реализовать Laravel Echo для уведомления об успешном импорте строк.
- Написать тесты на все ключевые компоненты функционала.

Обоснование подхода:
1. Человеческий фактор - сделан акцент на удобство использования (ошибки в отдельный файл, статус импорта в Redis).
2. Гибкость - использование API и WebSockets упрощает поддержку и интеграцию с фронтендом.
3. Производительность - Redis используется для быстрого трекинга прогресса, а импорт можно вынести в очередь.
4. Поддержка в будущем - логика разделена на контроллер, сервис и обработчик, что упрощает расширение функционала.

